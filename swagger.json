{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Epic Mail",
    "description": "A web app that helps people exchange messages/information over the internet",
    "license": {
      "name": "ISC"
    }
  },
  "host": "glacial-beach-95391.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Epic Mail",
      "description": "API for users to interact with the system"
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/signup": {
      
      "parameters": [
        {
          "name": "email",
          "in": "formData",
          "description": "Email Address of user that we want to create",
          "type" : "string",
          "required": true
        },
        {
          "name": "password",
          "in": "formData",
          "description": "Password of user that we want to create",
          "type" : "string",
          "required": true
        },
        {
          "name": "firstName",
          "in": "formData",
          "description": "First name of user that we want to create",
          "type" : "string",
          "required": true
        },
        {
          "name": "lastName",
          "in": "formData",
          "description": "Last name of user that we want to create",
          "type" : "string",
          "required": true
        }
      ],
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Create new user in system",
        "responses": {
          "201": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "403": {
            "description": "Signup failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "User tries to log in",
        "parameters": [
          {
            "name": "email",
            "in": "formData",
            "description": "Email of the user",
            "type" : "string",
            "required": true
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password of user",
            "type" : "string",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Login is successful",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          },
          "401": {
            "description": "Unauthourized Access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "description": "User tries to send a message",
        "parameters": [
          {
            "name": "from",
            "in": "body",
            "description": "Email of sender"
          },
          {
            "name": "to",
            "in": "body",
            "description": "Email of receiver"
          }
          ,
          {
            "name": "subject",
            "in": "body",
            "description": "Title of the message"
          }
          ,
          {
            "name": "message",
            "in": "body",
            "description": "Content of the message"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Message Sent",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "400": {
            "description": "Message Sending Failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Messages"
        ],
        "description": "User tries retrieve all messages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieved all messages",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Could not retrieve messages",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    
    "/messages/unread": {
      "get": {
        "tags": [
          "Messages"
        ],
        "description": "User tries to retrieve all unread messages",
        
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieved unread Messages",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Could not retrieve unread messages",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/messages/sent": {
      "get": {
        "tags": [
          "Messages"
        ],
        "description": "User tries to get all sent messages",
        
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve sent Messages",
            "schema": {
              "$ref": "#/definitions/Messages"
            }
          },
          "404": {
            "description": "Could not retrieve messages",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/messages/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of message that we want to find",
          "type": "integer"
        }
      ],
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get a message  with given ID",
        "responses": {
          "200": {
            "description": "Message was found",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },"404": {
            "description": "Retrieval of message with given id, failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a message with given ID",
        "tags": [
          "Messages"
        ],
        "responses": {
          "200": {
            "description": "Message was delete",
            "schema": {
              "$ref": "#/definitions/Message"
            }
          },
          "404": {
            "description": "Deleting of message with given id failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    
    "Error": {
      
      "properties": {
        "status": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        }
      }
      
    },
    "Token": {
      "type":"object",
      "properties": {
        "status": {
          "type": "integer"
        },
        "data": {
          "type": "object"
        }
      }
      
    },
    "Messages": {
      "type":"object",
      "properties": {
        "status": {
          "type": "integer"
        },
        "data": {
          "type": "object"
        }
      }
      
    },
    "Message": {
      "type":"object",
      "properties": {
        "status": {
          "type": "integer"
        },
        "data": {
          "type": "object"
          
        }
      }
      
    }
  }
}